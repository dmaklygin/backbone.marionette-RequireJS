// Generated by CoffeeScript 1.6.2
(function() {
  define(["jquery"], function($) {
    var Html5Uploader;

    Html5Uploader = function(options) {
      var that;

      that = this;
      this.settings = $.extend({
        action: "upload",
        fileInputId: "filesToUpload",
        queueSizeLimit: 999,
        fileDataName: "Filedata",
        handler: "handlers/fileupload.ashx",
        maxFileSize: 2147483648,
        maxTotalSize: 2147483648,
        mimeTypes: ""
      }, options);
      this.filesQueue = [];
      this.xhrObj = null;
      this.currentUploadedFileId = 0;
      this.mimeTypes = this.settings.mimeTypes.split(",");
      this.totalSize = 0;
      this.itemsInQueue = 0;
      return this.init();
    };
    Html5Uploader.prototype = {
      constructor: Html5Uploader,
      init: function() {
        var fileInput;

        fileInput = $("#" + this.settings.fileInputId);
        fileInput.attr("multiple", "");
        if (this.settings.mimeTypes !== "") {
          fileInput.attr("accept", this.settings.mimeTypes);
        }
        return fileInput.bind("change", this.bind(this.fileSelected, this));
      }
    };
    ({
      browse: function() {
        var fileInput;

        fileInput = $("#" + this.settings.fileInputId);
        return fileInput.trigger("click");
      },
      bind: function(fn, bind) {
        return function() {
          return fn.apply(bind, arguments_);
        };
      },
      trimString: function(inputString) {
        return inputString.replace(/^\s+|\s+$/g, "");
      },
      prettifyFileSize: function(fileSizeInBytes) {
        var byteSize, sizeParts, suffix;

        byteSize = Math.round(fileSizeInBytes / 1024 * 100) * .01;
        suffix = "KB";
        if (byteSize > 1000) {
          byteSize = Math.round(byteSize * .001 * 100) * .01;
        }
        if (byteSize > 1000) {
          byteSize = Math.round(byteSize * .001 * 100) * .01;
          suffix = "GB";
        } else {
          suffix = "MB";
        }
        sizeParts = byteSize.toString().split(".");
        if (sizeParts.length > 1) {
          byteSize = sizeParts[0] + "." + sizeParts[1].substr(0, 2);
        } else {
          byteSize = sizeParts[0];
        }
        return byteSize + suffix;
      },
      enforceQueueLimits: function(file) {
        var errObj, fileFound, fileMimeType, i, mimeTypeFound;

        errObj = new Object();
        errObj.file = file;
        if (this.filesQueue.length >= this.settings.queueSizeLimit) {
          errObj.reason = "Queue is Full";
          $(this).trigger("onErrorAddingFile", errObj);
          return false;
        }
        if (file.size > this.settings.maxFileSize) {
          errObj.reason = "Max file size exceeded";
          $(this).trigger("onErrorAddingFile", errObj);
          return false;
        }
        if (this.mimeTypes.length !== 0) {
          mimeTypeFound = false;
          fileMimeType = file.type;
          i = 0;
          while (i < this.mimeTypes.length) {
            if (this.trimString(this.mimeTypes[i]) === fileMimeType) {
              mimeTypeFound = true;
              break;
            }
            i++;
          }
          if (!mimeTypeFound) {
            errObj.reason = "File type not allowed (" + fileMimeType + ")";
            $(this).trigger("onErrorAddingFile", errObj);
            return false;
          }
          if (this.totalSize + file.size > this.settings.maxTotalSize) {
            errObj.reason = "Max queue size exceeded";
            $(this).trigger("onErrorAddingFile", errObj);
            return false;
          }
          if (this.filesQueue.length > 0) {
            fileFound = false;
            i = 0;
          }
          while (i < this.filesQueue.length) {
            if (this.filesQueue[i].file.size === file.size && this.filesQueue[i].file.name === file.name) {
              fileFound = true;
              break;
            }
            i++;
          }
          if (fileFound) {
            errObj.reason = "File already added to queue";
            $(this).trigger("onErrorAddingFile", errObj);
            return false;
          }
          return true;
        }
      },
      calculateQueueFileSizes: function() {
        var i;

        this.totalSize = 0;
        i = 0;
        while (i < this.filesQueue.length) {
          this.totalSize += this.filesQueue[i].file.size;
          i++;
        }
        return this.itemsInQueue = this.filesQueue.length;
      },
      cancel: function(fileId) {
        var fileObj, i, newfilesQueue;

        if (this.currentUploadedFileId === fileId) {
          this.currentUploadedFileId = "";
          xhrObj.abort();
        }
        fileObj = this.getFileObjById(fileId);
        if (fileObj != null) {
          newfilesQueue = [];
          for (i in this.filesQueue) {
            if (this.filesQueue[i].id !== fileId) {
              newfilesQueue.push(this.filesQueue[i]);
            }
          }
          this.filesQueue = newfilesQueue;
          this.calculateQueueFileSizes();
          return $(this).trigger("onCancel", fileObj);
        }
      },
      clearQueue: function() {
        var _results;

        _results = [];
        while (this.filesQueue.length !== 0) {
          _results.push(this.cancel(this.filesQueue[0].id));
        }
        return _results;
      },
      getNextFileFromQueue: function() {
        var i;

        for (i in this.filesQueue) {
          if (this.filesQueue[i].status === 0) {
            return this.filesQueue[i];
          }
        }
        return null;
      },
      getFileObjById: function(fileId) {
        var i;

        for (i in this.filesQueue) {
          if (this.filesQueue[i].id === fileId) {
            return this.filesQueue[i];
          }
        }
        return null;
      },
      fileSelected: function(e) {
        var fileObj, i, input, selectedFile;

        input = e.target;
        i = 0;
        while (i < input.files.length) {
          selectedFile = input.files[i];
          if (this.enforceQueueLimits(selectedFile)) {
            fileObj = new Object();
            fileObj.id = Math.floor(Math.random() * 100000000);
            fileObj.file = selectedFile;
            fileObj.status = 0;
            this.filesQueue.push(fileObj);
            this.calculateQueueFileSizes();
            $(this).trigger("onAddedToQueue", fileObj);
          }
          i++;
        }
      },
      uploadFiles: function() {
        if (this.currentUploadedFileId === 0) {
          return this.uploadNextFile();
        }
      },
      uploadNextFile: function() {
        var fd, fileToUpload, xhrObj;

        fileToUpload = this.getNextFileFromQueue();
        if (fileToUpload != null) {
          $(this).trigger("onUploadStarted", fileToUpload);
          fd = new FormData();
          fd.append("action", this.settings.action);
          fd.append("fileId", fileToUpload.id);
          fd.append("Filedata", fileToUpload.file);
          fileToUpload.status = 1;
          this.currentUploadedFileId = fileToUpload.id;
          xhrObj = new XMLHttpRequest();
          xhrObj.upload.addEventListener("progress", this.bind(this.uploadProgress, this), false);
          xhrObj.addEventListener("load", this.bind(this.uploadComplete, this), false);
          xhrObj.addEventListener("error", this.bind(this.uploadFailed, this), false);
          xhrObj.addEventListener("abort", this.bind(this.uploadCanceled, this), false);
          xhrObj.open("POST", this.settings.handler);
          if (fd.fake) {
            xhrObj.setRequestHeader("Cache-Control", "no-cache");
            xhrObj.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            xhrObj.setRequestHeader("Content-Type", "multipart/form-data; boundary=" + fd.boundary);
            return xhrObj.sendAsBinary(fd.toString());
          } else {
            return xhrObj.send(fd);
          }
        } else {
          this.currentUploadedFileId = 0;
          return $(this).trigger("onAllComplete");
        }
      },
      uploadProgress: function(evt) {
        var progressObj;

        progressObj = new Object();
        progressObj.fileId = this.currentUploadedFileId;
        progressObj.lengthComputable = evt.lengthComputable;
        progressObj.loaded = evt.loaded;
        progressObj.position = evt.position;
        progressObj.total = evt.total;
        progressObj.totalSize = evt.totalSize;
        return $(this).trigger("onProgress", progressObj);
      },
      uploadComplete: function(e) {
        var fileObj;

        fileObj = this.getFileObjById(this.currentUploadedFileId);
        if (fileObj != null) {
          fileObj.status = 2;
          $(this).trigger("onComplete", {
            fileObj: fileObj,
            response: e.target.response
          });
        }
        return this.uploadNextFile();
      },
      uploadFailed: function(e) {
        var fileObj;

        fileObj = this.getFileObjById(this.currentUploadedFileId);
        if (fileObj) {
          fileObj.status = 3;
          $(this).trigger("onError", {
            fileObj: fileObj,
            response: e
          });
        }
        return this.uploadNextFile();
      },
      uploadCanceled: function(e) {
        var fileObj;

        fileObj = this.getFileObjById(this.currentUploadedFileId);
        if (fileObj) {
          fileObj.status = 4;
          $(this).trigger("onError", fileObj, e);
        }
        return this.uploadNextFile();
      }
    });
    return Html5Uploader;
  });

}).call(this);
