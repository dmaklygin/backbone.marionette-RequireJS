// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["backbone", "marionette", "msgbus"], function(Backbone, Marionette, msgbus) {
    var SearchView, _ref;

    SearchView = (function(_super) {
      __extends(SearchView, _super);

      function SearchView() {
        _ref = SearchView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      SearchView.prototype.el = "#searchBar";

      SearchView.prototype.initialize = function() {
        var $spinner,
          _this = this;

        $spinner = this.$("#spinner");
        msgbus.events.on("search:start", function() {
          return $spinner.fadeIn();
        });
        msgbus.events.on("search:stop", function() {
          return $spinner.fadeOut();
        });
        return msgbus.events.on("search:term", function(term) {
          return _this.$("#searchTerm").val(term);
        });
      };

      SearchView.prototype.events = {
        "change #searchTerm": "search"
      };

      SearchView.prototype.search = function() {
        var searchTerm;

        searchTerm = this.$("#searchTerm").val().trim();
        if (searchTerm.length > 0) {
          return msgbus.events.trigger("search:term", searchTerm);
        } else {
          return msgbus.events.trigger("search:noSearchTerm");
        }
      };

      return SearchView;

    })(Marionette.ItemView);
    return msgbus.events.on("search:term", function(searchTerm) {
      return Backbone.history.navigate("search/" + searchTerm);
    });
  });

}).call(this);
